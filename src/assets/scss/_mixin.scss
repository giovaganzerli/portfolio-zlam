// POSITION
@function is-valid-length($value) {
    @return (type-of($value) == "number" and not unitless($value)) 
        or (index(auto initial inherit 0, $value) != null);
}

@mixin position($position, $args: ()) {
    $offsets: top right bottom left;
    position: $position;
  
    @each $offset in $offsets {
      
        $index: index($args, $offset);
        @if $index {
      
            @if $index == length($args) {

                #{$offset}: 0;
            } @else {

                $next: nth($args, $index + 1);
                @if is-valid-length($next) {

                    #{$offset}: $next;
                } @else if index($offsets, $next) {

                #{$offset}: 0;
                } @else {

                    @warn "Valore `#{$next}` non valido per l'offset `#{$offset}`.";
                }
            }
        }
    }
}

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
  @include position(relative, $args);
}

// DISPLAY FLEX
@mixin flex($args: ()) {
    display: -webkit-flex;
    display:         flex;
    -webkit-justify-content: nth($args, 1);
            justify-content: nth($args, 1);
    @if(length($args) == 2) {
        -webkit-flex-wrap: nth($args, 2);
                flex-wrap: nth($args, 2);
    }
    @if(length($args) == 3) {
        -webkit-align-items: nth($args, 3);
                align-items: nth($args, 3);
    }
}

// MEDIA QUERY
@mixin device($dev) {
    @each $device in $devices {
        @if(nth($device, 2) == $dev) {
            @if(nth($device, 3) == 0) {
                @if(str-index(nth($device, 2), '-portrait')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (min-width: #{nth($device, 4)*2px}) and (orientation: portrait), (min-width: #{nth($device, 4)*1px}) and (orientation : portrait) { @content; }
                } @else if(str-index(nth($device, 2), '-landscape')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (min-width: #{nth($device, 4)*2px}) and (orientation: landscape), (min-width: #{nth($device, 4)*1px}) and (orientation : landscape) { @content; }
                } @else {
                    @media only screen and (min-device-pixel-ratio: 2) and (min-width: #{nth($device, 4)*2px}), (min-width: #{nth($device, 4)*1px}) { @content; }
                }
            } @else if(length($device) == 3) {
                @if(str-index(nth($device, 2), '-portrait')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}) and (orientation: portrait), (max-width: #{nth($device, 3)*1px}) and (orientation : portrait) { @content; }
                } @else if(str-index(nth($device, 2), '-landscape')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}) and (orientation: landscape), (max-width: #{nth($device, 3)*1px}) and (orientation: landscape) { @content; }
                } @else {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}), (max-width: #{nth($device, 3)*1px}) { @content; }
                }
            } @else {
                @if(str-index(nth($device, 2), '-portrait')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}) and (min-width: #{nth($device, 4)*2px}) and (orientation: portrait), (max-width: #{nth($device, 3)*1px}) and (min-width: #{nth($device, 4)*1px}) and (orientation : portrait) { @content; }
                } @else if(str-index(nth($device, 2), '-landscape')) {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}) and (min-width: #{nth($device, 4)*2px}) and (orientation: landscape), (max-device-width: #{nth($device, 3)*1px}) and (min-width: #{nth($device, 4)*1px}) and (orientation: landscape) { @content; }
                } @else {
                    @media only screen and (min-device-pixel-ratio: 2) and (max-width: #{nth($device, 3)*2px}) and (min-width: #{nth($device, 4)*2px}), (max-width: #{nth($device, 3)*1px}) and (min-width: #{nth($device, 4)*1px}) { @content; }
                }
            }
        }
    }
}

// CUSTOM MEDIA QUERY
@mixin media($min, $max) {
    @if($min == null) {
        @media only screen and (max-device-pixel-ratio: 2) and (max-width: $max*2px), (max-width: $max*1px) { @content; }
    } @else if($max == null) {
        @media only screen and (min-device-pixel-ratio: 2) and (min-width: $min*2px), (min-width: $min*1px) { @content; }
    } @else {
        @media only screen and (min-device-pixel-ratio: 2) and (max-width: $max*2px) and (min-width: $min*2px), (max-width: $max*1px) and (min-width: $min*1px) { @content; }
    }
}

// PREFIX
@mixin prefix($prop, $args: ()) {
    -webkit-#{$prop}: #{$args};
    -moz-#{$prop}: #{$args};
    -o-#{$prop}: #{$args};
    #{$prop}: #{$args};
}

// KEYFRAMES
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}


/*
 * ANIMATION http://waitanimate.wstone.io/#!/
 *
 * Example:
@include waitAnimate(
    (
        animationName: blink,
        keyframes: (
            50: (
                opacity: 0
            )
        ),
        duration: 3,
        waitTime: 0,
        timingFunction: linear,
        iterationCount: infinite
    )
);
*/

@mixin waitAnimate($options: ()) {

    $options: map-merge(( animationName: waitAnimate,
    duration: 1,
    waitTime: 0,
    timingFunction: linear,
    iterationCount: infinite), $options);

    $name: map-get($options, animationName);
    $kf: map-get($options, keyframes);
    $kfLength: length($kf);
    $duration: map-get($options, duration);
    $waitTime: map-get($options, waitTime);
    $timingFunction: map-get($options, timingFunction);
    $iterationCount: map-get($options, iterationCount);
    $counter: 1; // index of 'each'
    @keyframes #{$name} {
        @each $frame,
        $prop in $kf {
            #{$frame * $duration / ($duration + $waitTime)}% {
                @each $k,
                $v in $prop {
                    #{$k}: #{$v}
                }
            } // if last in loop and waitTime is not 0, add the last frame as 100% (this is what creates the pause)
            @if $counter==$kfLength and $waitTime > 0 {
                100% {
                    @each $k,
                    $v in $prop {
                        #{$k}: #{$v}
                    }
                }
            }
            $counter: $counter + 1;
        }
    }

    .#{$name} {
        animation: #{$name} #{$duration + $waitTime}s #{$timingFunction} #{$iterationCount};
    }
}

/*
 * Viewport sized typography with minimum and maximum values
 *
 * @author Eduardo Boucas (@eduardoboucas)
 *
 * @param {Number}   $responsive  - Viewport-based size
 * @param {Number}   $min         - Minimum font size (px)
 * @param {Number}   $max         - Maximum font size (px)
 *                                  (optional)
 * @param {Number}   $fallback    - Fallback for viewport-
 *                                  based units (optional)
 *
 * @example scss - 5vw font size (with 50px fallback), 
 *                 minumum of 35px and maximum of 150px
 *  @include responsive-font(5vw, 35px, 150px, 50px);
 */

@mixin responsiveFont($responsive, $min, $max: false, $fallback: false) {
    $responsive-unitless: $responsive / ($responsive - $responsive + 1);
    $dimension: if(unit($responsive)=='vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;

    @media (max-#{$dimension}: #{$min-breakpoint}) {
        font-size: $min;
    }

    @if $max {
        $max-breakpoint: $max / $responsive-unitless * 100;

        @media (min-#{$dimension}: #{$max-breakpoint}) {
            font-size: $max;
        }
    }

    @if $fallback {
        font-size: $fallback;
    }

    font-size: $responsive;
}
